<?php
/**
 * Defines the FloatUtilTest class
 */

namespace DominionEnterprises\Tests;
use DominionEnterprises\FloatUtil as F;

/**
 * Test class for \DominionEnterprises\FloatUtil.
 * Generated by PHPUnit on 2012-06-15 at 14:44:04.
 */
final class FloatUtilTest extends \PHPUnit_Framework_TestCase
{
    public function testParseWithFloatReturnsCorrectValue()
    {
        $this->assertSame(12.3, F::parse(12.3));
    }

    public function testParseWithIntReturnsCorrectValue()
    {
        $this->assertSame(12.0, F::parse(12));
    }

    public function testParseWithNumericStringReturnsCorrectValue()
    {
        $this->assertSame(1.23, F::parse('1.23'));
    }

    public function testParseThrowsInvalidArgumentExceptionWithNonStringFloatOrIntInput()
    {
        $this->setExpectedException('InvalidArgumentException');
        F::parse(true);
    }

    public function testParseThrowsUnexpectedValueExceptionWithNonNumericInput()
    {
        $this->setExpectedException('UnexpectedValueException');
        F::parse('not_numeric');
    }

    public function testParseThrowsUnexpectedValueExceptionWithHexInput()
    {
        $this->setExpectedException('UnexpectedValueException');
        F::parse('0xFF');
    }

    public function testParseThrowsOverflowExceptionWithInfiniteInput()
    {
        $this->setExpectedException('OverflowException');
        F::parse('1.7976931348623E+400');
    }

    public function testTryParseReturnsTrueWithFloatInput()
    {
        $result = null;
        $this->assertTrue(F::tryParse(12.3, $result));
        $this->assertTrue($result === 12.3);
    }

    public function testTryParseReturnsTrueWithIntInput()
    {
        $result = null;
        $this->assertTrue(F::tryParse(12, $result));
        $this->assertTrue($result === 12.0);
    }

    public function testTryParseReturnsTrueWithNumericStringInput()
    {
        $result = null;
        $this->assertTrue(F::tryParse('1.23', $result));
        $this->assertTrue($result === 1.23);
    }

    public function testTryParseReturnsFalseWithNonFloatIntOrStringInput()
    {
        $result = null;
        $this->assertFalse(F::tryParse(true, $result));
        $this->assertTrue($result === null);
    }

    public function testTryParseReturnsFalseWithNonNumericStringInput()
    {
        $result = null;
        $this->assertFalse(F::tryParse('not_numeric', $result));
        $this->assertTrue($result === null);
    }

    public function testTryParseReturnsFalseWithHexInput()
    {
        $result = null;
        $this->assertFalse(F::tryParse('0xFF', $result));
        $this->assertTrue($result === null);
    }

    public function testTryParseReturnsFalseWithInfiniteInput()
    {
        $result = null;
        $this->assertFalse(F::tryParse('1.7976931348623E+400', $result));
        $this->assertTrue($result === null);
    }
}
