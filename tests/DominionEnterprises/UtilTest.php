<?php
/**
 * Defines the UtilTest class
 */

namespace DominionEnterprises\Tests;
use DominionEnterprises\Util as U;

/**
 * Test class for \DominionEnterprises\Util.
 * Generated by PHPUnit on 2012-06-15 at 14:44:21.
 */
final class UtilTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @test
     */
    public function getExceptionInfo()
    {
        $expectedLine = __LINE__ + 1;
        $result = U::getExceptionInfo(new \Exception('a message', 42));

        $this->assertTrue(strpos($result['trace'], 'getExceptionInfo') !== false);

        $expected = array(
            'type' => 'Exception',
            'message' => 'a message',
            'code' => 42,
            'file' => __FILE__,
            'line' => $expectedLine,
            'trace' => $result['trace'],
        );
        $this->assertSame($expected, $result);
    }

    /**
     * @test
     * @expectedException \ErrorException
     * @covers \DominionEnterprises\Util::raiseException
     */
    public function raiseExceptionThrowsErrorException()
    {
        set_error_handler('\DominionEnterprises\Util::raiseException');
        trigger_error('test');
        restore_error_handler();
    }

    /**
     * @test
     * @covers \DominionEnterprises\Util::raiseException
     */
    public function raiseExceptionSetsExceptionPropertiesCorrectly()
    {
        set_error_handler('\DominionEnterprises\Util::raiseException');
        try {
            trigger_error('test', E_USER_NOTICE);
        } catch (\ErrorException $e) {
            $this->assertSame('test', $e->getMessage());
            $this->assertSame(0, $e->getCode());
            $this->assertSame(E_USER_NOTICE, $e->getSeverity());
            $this->assertSame((__LINE__) - 5, $e->getLine());
            $this->assertSame(__FILE__, $e->getFile());
        }

        restore_error_handler();
    }

    /**
     * @test
     * @covers \DominionEnterprises\Util::raiseException
     */
    public function raiseExceptionReturnsFalseIfErrorReportingDisabled()
    {
        $restoreLevel = error_reporting(0);
        $this->assertFalse(U::raiseException(E_USER_NOTICE, 'test', __FILE__, __LINE__));
        error_reporting($restoreLevel);
    }

    /**
     * @test
     * @expectedException \InvalidArgumentException
     * @covers \DominionEnterprises\Util::throwIfNull
     */
    public function throwIfNullFailure()
    {
        U::throwIfNull(null);
    }

    /**
     * @test
     * @covers \DominionEnterprises\Util::throwIfNullOrWhiteSpace
     */
    public function throwIfNullOrWhiteSpaceNoArgs()
    {
        U::throwIfNullOrWhiteSpace();
    }

    /**
     * @test
     * @covers \DominionEnterprises\Util::throwIfNull
     */
    public function throwIfNullNoArgs()
    {
        U::throwIfNull();
    }

    /**
     * @test
     * @dataProvider throwIfNullSuccessData
     * @covers \DominionEnterprises\Util::throwIfNull
     */
    public function throwIfNullSuccess($value)
    {
        U::throwIfNull($value);
    }

    /**
     * Success test cases for throwIfNull()
     *
     * @return array
     */
    public function throwIfNullSuccessData()
    {
        return array(
            array(123),
            array('abc'),
            array(array()),
            array(''),
            array(PHP_EOL),
        );
    }

    /**
     * @test
     * @expectedException \InvalidArgumentException
     * @dataProvider throwIfNullOrWhiteSpaceFailureData
     * @covers \DominionEnterprises\Util::throwIfNullOrWhiteSpace
     */
    public function throwIfNullOrWhiteSpaceFailures($value)
    {
        U::throwIfNullOrWhiteSpace($value);
    }

    /**
     * @test
     * @dataProvider throwIfNullOrWhiteSpaceSuccessData
     * @covers \DominionEnterprises\Util::throwIfNullOrWhiteSpace
     */
    public function throwIfNullOrWhiteSpaceSuccess($value)
    {
        U::throwIfNullOrWhiteSpace($value);
    }

    /**
     * Success test cases for throwIfNullOrWhiteSpace()
     *
     * @return array
     */
    public function throwIfNullOrWhiteSpaceSuccessData()
    {
        return array(
            array(123),
            array('abc'),
            array(array()),
        );
    }

    /**
     * Failure test cases for throwIfNullOrWhitespace()
     *
     * @return array
     */
    public function throwIfNullOrWhiteSpaceFailureData()
    {
        return array(
            array(null),
            array(PHP_EOL),
            array(" \n "),
            array("\t"),
            array(''),
        );
    }

    /**
     * @test
     */
    public function throwIfNotTypeBasicSuccess()
    {
        U::throwIfNotType(array('string' => array('string1', 'string2'), 'integer' => array(1, 2), 'int' => 3, 'null' => null));
    }

    /**
     * @test
     * @expectedException \InvalidArgumentException
     */
    public function throwIfNotTypeStringFailure()
    {
        U::throwIfNotType(array('string' => 2));
    }

    /**
     * @test
     * @expectedException \InvalidArgumentException
     */
    public function throwIfNotTypeBoolFailure()
    {
        U::throwIfNotType(array('bool' => 2));
    }

    /**
     * @test
     * @expectedException \InvalidArgumentException
     */
    public function throwIfNotTypeNullFailure()
    {
        U::throwIfNotType(array('null' => 2));
    }

    /**
     * @test
     * @expectedException \InvalidArgumentException
     */
    public function throwIfNotTypeNotStringTypeArg()
    {
        U::throwIfNotType(array(1));
    }

    /**
     * @test
     * @expectedException \InvalidArgumentException
     */
    public function throwIfNotTypeNotBoolAllowNullsArg()
    {
        U::throwIfNotType(array(), false, 'BAD');
    }

    /**
     * @test
     * @expectedException \InvalidArgumentException
     */
    public function throwIfNotTypeNotBoolFailOnWhitespaceArg()
    {
        U::throwIfNotType(array(), 'BAD');
    }

    /**
     * @test
     * @expectedException \InvalidArgumentException
     */
    public function throwIfNotTypeBadFunctionName()
    {
        U::throwIfNotType(array('FUNCTHATDOESNTEXIST' => 2));
    }

    /**
     * @test
     */
    public function throwIfNotTypeAllowNullsSuccess()
    {
        U::throwIfNotType(array('int' => array(1, null), 'string' => null, 'bool' => null), false, true);
    }

    /**
     * @test
     * @expectedException \InvalidArgumentException
     */
    public function throwIfNotTypeWhitespaceFailure()
    {
        U::throwIfNotType(array('int' => 1, 'string' => '   '), true);
    }

    /**
     * @test
     */
    public function ensureNotSuccess()
    {
        $this->assertTrue(U::ensureNot(false, is_string('boo')));
    }

    /**
     * @test
     * @expectedException \InvalidArgumentException
     */
    public function ensureNotBadArg()
    {
        U::ensureNot(false, false, 1);
    }

    /**
     * @test
     * @expectedException \Exception
     */
    public function ensureNotBaseException()
    {
        U::ensureNot(false, is_string(1));
    }

    /**
     * @test
     * @expectedException \RuntimeException
     * @expectedExceptionMessage boo
     */
    public function ensureNotUserException()
    {
        U::ensureNot(false, is_string(1), new \RuntimeException('boo'));
    }

    /**
     * @test
     * @expectedException \Exception
     * @expectedExceptionMessage bah
     */
    public function ensureNotUserMessage()
    {
        U::ensureNot(false, is_string(1), 'bah');
    }

    /**
     * @test
     * @expectedException \Exception
     * @expectedExceptionMessage bah
     */
    public function ensureNotDynamicException()
    {
        U::ensureNot(false, is_string(1), 'Exception', array('bah'));
    }

    /**
     * @test
     */
    public function ensureSuccess()
    {
        $this->assertTrue(U::ensure(true, is_string('boo')));
    }

    /**
     * @test
     * @expectedException \InvalidArgumentException
     */
    public function ensureBadArg()
    {
        U::ensure(false, true, 1);
    }

    /**
     * @test
     * @expectedException \Exception
     */
    public function ensureBaseException()
    {
        U::ensure(true, is_string(1));
    }

    /**
     * @test
     * @expectedException \RuntimeException
     * @expectedExceptionMessage boo
     */
    public function ensureUserException()
    {
        U::ensure(true, is_string(1), new \RuntimeException('boo'));
    }

    /**
     * @test
     * @expectedException \Exception
     * @expectedExceptionMessage bah
     */
    public function ensureUserMessage()
    {
        U::ensure(true, is_string(1), 'bah');
    }

    /**
     * @test
     * @expectedException \Exception
     * @expectedExceptionMessage bah
     */
    public function ensureDynamicException()
    {
        U::ensure(true, is_string(1), 'Exception', array('bah'));
    }

    /**
     * @test
     */
    public function ensureTrueSuccess()
    {
        $this->assertTrue(U::ensureTrue(is_string('boo')));
    }

    /**
     * @test
     */
    public function ensureNotFalseSuccess()
    {
         $this->assertTrue(U::ensureNotFalse(is_string('boo')));
    }
}
