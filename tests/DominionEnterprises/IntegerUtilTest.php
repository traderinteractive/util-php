<?php
/**
 * Defines the IntegerUtilTest class
 */

namespace DominionEnterprises\Tests;
use DominionEnterprises\IntegerUtil as I;

/**
 * Test class for \DominionEnterprises\IntegerUtil.
 * Generated by PHPUnit on 2012-06-15 at 14:44:12.
 */
final class IntegerUtilTest extends \PHPUnit_Framework_TestCase
{
    public function testParseReturnsCorrectResultWithIntInput()
    {
        $this->assertSame(123, I::parse(123));
    }

    public function testParseReturnsCorrectResultWithStringInput()
    {
        $this->assertSame(123, I::parse('123'));
    }

    public function testParseReturnsCorrectResultWithSignedStringInput()
    {
        $this->assertSame(-123, I::parse('-123'));
        $this->assertSame(123, I::parse('+123'));
    }

    public function testParseThrowsInvalidArgumentExceptionWithNonStringOrIntInput()
    {
        $this->setExpectedException('InvalidArgumentException');
        I::parse(true);
    }

    public function testParseThrowsInvalidArgumentExceptionWithEmptyStringInput()
    {
        $this->setExpectedException('InvalidArgumentException');
        I::parse('');
    }

    public function testParseThrowsInvalidArgumentExceptionWithWhitespaceStringInput()
    {
        $this->setExpectedException('InvalidArgumentException');
        I::parse('   ');
    }

    public function testParseThrowsInvalidArgumentExceptionWithNonDigitStringInput()
    {
        $this->setExpectedException('InvalidArgumentException');
        I::parse('123.4');
    }

    public function testParseThrowsInvalidArgumentExceptionWithSignedNonDigitStringInput()
    {
        $this->setExpectedException('InvalidArgumentException');
        I::parse('-123.4');
    }

    public function testParseThrowsOverflowExceptionWithStringInputGreaterThanPhpIntMax()
    {
        $this->setExpectedException('OverflowException');
        I::parse(((string)PHP_INT_MAX) . '0');
    }

    public function testParseThrowsOverflowExceptionWithStringInputGreaterThanPhpIntMin()
    {
        $this->setExpectedException('OverflowException');
        I::parse(((string)~PHP_INT_MAX) . '0');
    }

    public function testTryParse()
    {
        $result = null;
        $this->assertTrue(I::tryParse(123, $result));
        $this->assertSame(123, $result);

        $result = null;
        $this->assertTrue(I::tryParse('-123', $result));
        $this->assertSame(-123, $result);

        $result = null;
        $this->assertTrue(I::tryParse('+123', $result));
        $this->assertSame(123, $result);

        $result = null;
        $this->assertFalse(I::tryParse('123.4', $result));
        $this->assertSame(null, $result);

        $result = null;
        $this->assertFalse(I::tryParse('-123.4', $result));
        $this->assertSame(null, $result);

        $result = null;
        $this->assertFalse(I::tryParse(true, $result));
        $this->assertSame(null, $result);

        $result = null;
        $this->assertFalse(I::tryParse('', $result));
        $this->assertSame(null, $result);

        $result = null;
        $this->assertFalse(I::tryParse('   ', $result));
        $this->assertSame(null, $result);

        $result = null;
        $this->assertFalse(I::tryParse(((string)PHP_INT_MAX) . '0', $result));
        $this->assertSame(null, $result);

        $result = null;
        $this->assertFalse(I::tryParse(((string)~PHP_INT_MAX) . '0', $result));
        $this->assertSame(null, $result);
    }
}
